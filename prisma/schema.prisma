// ============================
// üìë GLOBAL CONFIG
// ============================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// üìä ENUMS
// ============================
enum ChannelType {
  LOG
  GENERAL
  TICKETS
  ANNOUNCEMENTS
}

enum StorageType {
  BAG    // Mochila ‚Äî Itens us√°veis, limitado pela aplica√ß√£o
  CHEST  // Ba√∫ ‚Äî Armazenamento, sem limite
}

enum ItemRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum ItemType {
  CONSUMABLE
  WEAPON
  ARMOR
  KEYITEM
}

// ============================
// üì¶ SISTEMA DE GUILDA
// ============================
model Guild {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  channels GuildChannel[]
  members  Member[]
  shops    Shop[]
  
  @@map("guilds")
}

model GuildChannel {
  id      String      @id
  name    String
  url     String
  type    ChannelType
  guildId String
  
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  
  @@index([guildId])
  @@map("guild_channels")
}

// ============================
// üßë‚Äçü§ù‚Äçüßë SISTEMA DE MEMBROS
// ============================
model Member {
  id       String
  guildId  String
  xp       Int      @default(0)
  money    Int      @default(0)
  sentence String?  // Corrigido: removido campo duplicado "setence"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  guild            Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  inventory        Inventory?
  transactionLogs  TransactionLog[]
  
  @@id([id, guildId])
  @@index([guildId])
  @@index([xp])     // Para rankings de XP
  @@index([money])  // Para rankings de dinheiro
  @@map("members")
}

// ============================
// üéí SISTEMA DE INVENT√ÅRIO OTIMIZADO
// ============================
model Inventory {
  id       String @id @default(cuid())
  memberId String
  guildId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  member Member          @relation(fields: [memberId, guildId], references: [id, guildId], onDelete: Cascade)
  items  InventoryItem[]
  
  @@unique([memberId, guildId])
  @@map("inventories")
}

model InventoryItem {
  id          String      @id @default(cuid())
  inventoryId String
  itemId      String
  quantity    Int         @default(1)
  storage     StorageType @default(BAG)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([inventoryId, itemId, storage])
  @@index([inventoryId])
  @@index([itemId])
  @@index([storage])
  @@map("inventory_items")
}

// ============================
// üó°Ô∏è SISTEMA DE ITENS OTIMIZADO
// ============================
model Item {
  id          String     @id @default(cuid())
  name        String     @unique  // Nomes √∫nicos para facilitar buscas
  rarity      ItemRarity
  type        ItemType
  description String
  price       Int
  
  // Campos opcionais para RPG
  value       Int?       // Valor de venda (diferente do pre√ßo de compra)
  usable      Boolean    @default(true)
  stackable   Boolean    @default(true)
  maxStack    Int?       // Limite de stack (null = sem limite)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  inventoryItems  InventoryItem[]
  shopItems       Shop[]
  transactionLogs TransactionLog[]
  
  @@index([rarity])
  @@index([type])
  @@index([name])
  @@map("items")
}

// ============================
// üìà SISTEMA DE EXPERI√äNCIA E N√çVEIS
// ============================
model LevelConfig {
  level Int @id
  xpRequired Int
  rewards String? // JSON string com recompensas do n√≠vel
  
  @@map("level_configs")
}

// ============================
// üè™ SISTEMA DE LOJA (OPCIONAL)
// ============================
model Shop {
  id      String @id @default(cuid())
  guildId String
  itemId  String
  price   Int
  stock   Int?   // null = estoque infinito
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Rela√ß√µes
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([guildId, itemId])
  @@index([guildId])
  @@map("shops")
}

// ============================
// üìä LOGS E AUDITORIA
// ============================
model TransactionLog {
  id        String   @id @default(cuid())
  memberId  String
  guildId   String
  type      String   // "buy", "sell", "use", "transfer", "admin"
  itemId    String?
  quantity  Int?
  amount    Int?     // Valor em dinheiro
  reason    String?
  
  createdAt DateTime @default(now())
  
  // Rela√ß√µes
  member Member @relation(fields: [memberId, guildId], references: [id, guildId], onDelete: Cascade)
  item   Item?  @relation(fields: [itemId], references: [id], onDelete: SetNull)
  
  @@index([memberId, guildId])
  @@index([createdAt])
  @@index([type])
  @@map("transaction_logs")
}